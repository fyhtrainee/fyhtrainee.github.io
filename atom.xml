<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>yuHeng&#39;s blog</title>
    <link href="http://example.com" />
    <updated>2023-09-01T08:14:02.000Z</updated>
    <category term="redis" />
    <entry>
        <id>http://example.com/2023/09/01/redis-BigKey%E9%97%AE%E9%A2%98/</id>
        <title>redis BigKey问题</title>
        <link rel="alternate" href="http://example.com/2023/09/01/redis-BigKey%E9%97%AE%E9%A2%98/"/>
        <content type="html">&lt;h1 id=&#34;redis-bigkey和相关阻塞式问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-bigkey和相关阻塞式问题&#34;&gt;#&lt;/a&gt; Redis BigKey 和相关阻塞式问题&lt;/h1&gt;
&lt;h2 id=&#34;1-多大算bigkey&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-多大算bigkey&#34;&gt;#&lt;/a&gt; 1. 多大算 BigKey&lt;/h2&gt;
&lt;p&gt;根据《阿里云 Redis 开发规范》，string 类型控制在 10kb 以内，hash list set zset 元素个数不要超过 500.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img1.imgtp.com/2023/08/30/6RGpzh5o.png&#34; alt=&#34;阿里云Redis开发规范原文&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-bigkey的危害&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-bigkey的危害&#34;&gt;#&lt;/a&gt; 2. BigKey 的危害&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;内存不均，集群迁移困难。&lt;/li&gt;
&lt;li&gt;超时删除，BigKey。&lt;/li&gt;
&lt;li&gt;网络流量阻塞。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-如何发现bigkey&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-如何发现bigkey&#34;&gt;#&lt;/a&gt; 3. 如何发现 BigKey&lt;/h2&gt;
&lt;h3 id=&#34;1-redis-cli-bigkeys&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-redis-cli-bigkeys&#34;&gt;#&lt;/a&gt; 1. redis-cli --bigkeys&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给出每种数据结构 Top 1 bigkey，同时给出每种数据类型的键值个数 + 平均大小.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;redis-cli -h 127.0.0.1 -p 6379 -a 111111 --bigkeys&lt;/p&gt;
&lt;p&gt;每隔 100 条 scan 指令就会休眠 0.1s，ops 就不会剧烈抬升，但是扫描的时间会变长&lt;/p&gt;
&lt;p&gt;redis-cli -h 127.0.0.1 -p 7001 –-bigkeys -i 0.1&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img1.imgtp.com/2023/08/30/h5v8GyyR.png&#34; alt=&#34;执行结果&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-memory-usage&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-memory-usage&#34;&gt;#&lt;/a&gt; 2. MEMORY USAGE&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img1.imgtp.com/2023/08/30/NbhtRtUO.png&#34; alt=&#34;官网截图&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-如何在生产中避免危险命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-如何在生产中避免危险命令&#34;&gt;#&lt;/a&gt; 4. 如何在生产中避免危险命令&lt;/h2&gt;
&lt;p&gt;通过设置禁用一些命令。以下是 redis.conf 文件的描述。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img1.imgtp.com/2023/08/30/ZhNhsIte.png&#34; alt=&#34;conf文件描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改之后，运行结果。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img1.imgtp.com/2023/08/30/geXIxawS.png&#34; alt=&#34;运行结果&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-bigkey生产调优&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-bigkey生产调优&#34;&gt;#&lt;/a&gt; 5. BigKey 生产调优&lt;/h2&gt;
&lt;h3 id=&#34;lazy-freeing&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lazy-freeing&#34;&gt;#&lt;/a&gt; LAZY FREEING&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://img1.imgtp.com/2023/08/30/qwxyATWq.png&#34;&gt;&lt;img data-src=&#34;https://img1.imgtp.com/2023/08/30/qwxyATWq.png&#34; alt=&#34;1693374956725.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img1.imgtp.com/2023/08/30/uNplzpmq.png&#34; alt=&#34;Redis.conf配置截图&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;优化配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优化配置&#34;&gt;#&lt;/a&gt; 优化配置&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://img1.imgtp.com/2023/08/30/4Zj794Ky.png&#34;&gt;&lt;img data-src=&#34;https://img1.imgtp.com/2023/08/30/4Zj794Ky.png&#34; alt=&#34;1693375221380.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;6如何删除bigkey&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6如何删除bigkey&#34;&gt;#&lt;/a&gt; 6. 如何删除 BigKey&lt;/h2&gt;
&lt;p&gt;参照《阿里云 Redis 开发规范》&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://img1.imgtp.com/2023/08/30/DthLgMhj.png&#34;&gt;&lt;img data-src=&#34;https://img1.imgtp.com/2023/08/30/DthLgMhj.png&#34; alt=&#34;1693375353677.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;String 一般使用 del，过于庞大使用 unlink&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hash 使用 hscan 每次获取少量 filed-value，再使用 hdel 删除每个 filed&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://img1.imgtp.com/2023/08/30/nxBbSIFY.png&#34;&gt;&lt;img data-src=&#34;https://img1.imgtp.com/2023/08/30/nxBbSIFY.png&#34; alt=&#34;1693375670429.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;list 使用 ltrim 渐进式逐步删除，直至全部删除完毕。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5CLaptop%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230830141026390.png&#34; alt=&#34;image-20230830141026390&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;set 使用 sscan 每次获取部分元素，再使用 srem 命令删除每个元素。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5CLaptop%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230830141121717.png&#34; alt=&#34;image-20230830141121717&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;zset 每次获取部分元素，再使用 ZREMRANGEBYRANK 命令删除每个元素&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://img1.imgtp.com/2023/08/30/aJ4Ix8Qn.png&#34;&gt;&lt;img data-src=&#34;https://img1.imgtp.com/2023/08/30/aJ4Ix8Qn.png&#34; alt=&#34;1693375972000.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;7-del-vs-unlink&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-del-vs-unlink&#34;&gt;#&lt;/a&gt; 7. del vs unlink&lt;/h2&gt;
&lt;p&gt;看到 stackoverflow 上一篇很好的回答贴上来&lt;/p&gt;
&lt;p&gt;Before discussing which one is better, let’s take a look at the difference between these commands. Both  &lt;code&gt;DEL&lt;/code&gt;  and  &lt;code&gt;UNLINK&lt;/code&gt;  free the key part in blocking mode. And the difference is the way they free the value part.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DEL&lt;/code&gt;  always frees the value part in blocking mode. However, if the value is too large, e.g. too many allocations for a large  &lt;code&gt;LIST&lt;/code&gt;  or  &lt;code&gt;HASH&lt;/code&gt; , it blocks Redis for a long time. In order to solve the problem, Redis implements the  &lt;code&gt;UNLINK&lt;/code&gt;  command, i.e. an ‘non-blocking’ delete.&lt;/p&gt;
&lt;p&gt;In fact,  &lt;code&gt;UNLINK&lt;/code&gt;  is &lt;strong&gt;NOT always non-blocking/async&lt;/strong&gt;. If the value is small, e.g. the size of  &lt;code&gt;LIST&lt;/code&gt;  or  &lt;code&gt;HASH&lt;/code&gt;  is less than  &lt;code&gt;64&lt;/code&gt; , the value will be freed immediately. In this way,  &lt;code&gt;UNLINK&lt;/code&gt;  is almost the same as  &lt;code&gt;DEL&lt;/code&gt; , except that it costs a few more function calls than  &lt;code&gt;DEL&lt;/code&gt; . However, if the value is large, Redis puts the value into a list, and the value will be freed by another thread i.e. the non-blocking free. In this way, the main thread has to do some synchronization with the background thread, and that’s also a cost.&lt;/p&gt;
&lt;p&gt;In a conclusion, if the value is small,  &lt;code&gt;DEL&lt;/code&gt;  is at least, as good as  &lt;code&gt;UNLINK&lt;/code&gt; . If value is very large, e.g.  &lt;code&gt;LIST&lt;/code&gt;  with thousands or millions of items,  &lt;code&gt;UNLINK&lt;/code&gt;  is much better than  &lt;code&gt;DEL&lt;/code&gt; . You can always safely replace  &lt;code&gt;DEL&lt;/code&gt;  with  &lt;code&gt;UNLINK&lt;/code&gt; . However, if you find the thread synchronization becomes a problem (multi-threading is always a headache), you can rollback to  &lt;code&gt;DEL&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since Redis 6.0, there’s a new configuration: &lt;em&gt;&lt;strong&gt;lazyfree-lazy-user-del&lt;/strong&gt;&lt;/em&gt;. You can set it to be &lt;em&gt;yes&lt;/em&gt;, and Redis will run the  &lt;code&gt;DEL&lt;/code&gt;  command as if running a  &lt;code&gt;UNLINK&lt;/code&gt;  command.&lt;/p&gt;
</content>
        <category term="redis" />
        <updated>2023-09-01T08:14:02.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/09/01/redis%E6%98%AF%E5%8D%95%E7%BA%BF%E7%A8%8B%E8%BF%98%E6%98%AF%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
        <title>redis是单线程还是多线程</title>
        <link rel="alternate" href="http://example.com/2023/09/01/redis%E6%98%AF%E5%8D%95%E7%BA%BF%E7%A8%8B%E8%BF%98%E6%98%AF%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
        <content type="html">&lt;h1 id=&#34;redis是单线程还是多线程的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis是单线程还是多线程的&#34;&gt;#&lt;/a&gt; Redis 是单线程还是多线程的？&lt;/h1&gt;
&lt;h2 id=&#34;1官网解释&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1官网解释&#34;&gt;#&lt;/a&gt; 1. 官网解释&lt;/h2&gt;
&lt;h3 id=&#34;how-can-redis-use-multiple-cpus-or-cores&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#how-can-redis-use-multiple-cpus-or-cores&#34;&gt;#&lt;/a&gt; How can Redis use multiple CPUs or cores?&lt;/h3&gt;
&lt;p&gt;It’s not very frequent that CPU becomes your bottleneck with Redis, as usually Redis is either memory or network bound. For instance, when using pipelining a Redis instance running on an average Linux system can deliver 1 million requests per second, so if your application mainly uses O(N) or O(log(N)) commands, it is hardly going to use too much CPU.&lt;/p&gt;
&lt;p&gt;However, to maximize CPU usage you can start multiple instances of Redis in the same box and treat them as different servers. At some point a single box may not be enough anyway, so if you want to use multiple CPUs you can start thinking of some way to shard earlier.&lt;/p&gt;
&lt;p&gt;You can find more information about using multiple Redis instances in the &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRpcy5pby90b3BpY3MvcGFydGl0aW9uaW5n&#34;&gt;Partitioning page&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;As of version 4.0, Redis has started implementing threaded actions. For now this is limited to deleting objects in the background and blocking commands implemented via Redis modules. For subsequent releases, the plan is to make Redis more and more threaded.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CPU 成为 Redis 瓶颈的情况并不常见，因为 Redis 通常都是内存或网络绑定的。例如，当使用流水线时，在普通 Linux 系统上运行的 Redis 实例每秒可提供 100 万个请求，所以如果你的应用程序主要使用 O (N) 或 O (log (N)) 命令，几乎不会占用太多 CPU。&lt;/p&gt;
&lt;p&gt;不过，为了最大限度地提高 CPU 使用率，你可以在同一个盒子中启动多个 Redis 实例，并将它们视为不同的服务器。在某些情况下，一个盒子可能不够用，所以如果你想使用多个 CPU，可以考虑提前分片。&lt;/p&gt;
&lt;p&gt;有关使用多个 Redis 实例的更多信息，请参阅分区页面。&lt;/p&gt;
&lt;p&gt;从 4.0 版开始，Redis 开始实现线程操作。目前，这仅限于在后台删除对象和通过 Redis 模块执行阻塞命令。在后续版本中，我们计划让 Redis 的线程化程度越来越高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-redis40之前&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-redis40之前&#34;&gt;#&lt;/a&gt; 2. Redis4.0 之前&lt;/h2&gt;
&lt;p&gt;在 redis4.x 时代，redis 的任何操作都是单线程的，而单线程的 redis 具有以下几个优点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单线程模型使得 redis 的开发和维护更加简单。&lt;/li&gt;
&lt;li&gt;即使使用的是单线程模型，也可以并发地处理多客户端的请求，主要使用的是 IO 多路复用和非阻塞 IO 实现。&lt;/li&gt;
&lt;li&gt;对于 Redis 系统来说，&lt;em&gt;&lt;strong&gt;主要的性能瓶颈是内存或者网络带宽而非 CPU&lt;/strong&gt;&lt;/em&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;单线程引发的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;正常情况下，del 命令可以很快地删除数据，但是当被删除的数据是一个非常大的对象时，例如包含了成千上万个元素的 hash 集合，那么 del 指令就会造成 Redis 主线程卡顿。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解决方案：惰性删除（lazy del）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 unlink 命令可以实现数据的异步删除的功能，然是处理其读写请求的仍然只有一个线程，所以仍然算是狭义上的单线程。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-redis67&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-redis67&#34;&gt;#&lt;/a&gt; 3. Redis6/7&lt;/h2&gt;
&lt;p&gt;从 redis6/7 开始，redis 正式引入多线程特性和 IO 多路复用。&lt;/p&gt;
&lt;p&gt;官网中所说，&lt;em&gt;&lt;strong&gt;redis 的性能瓶颈几乎不会是 cpu 的性能，而是内存或者网络带宽&lt;/strong&gt;&lt;/em&gt;，所以为了提高吞吐量，采用多个 IO 线程来处理网络请求，提高网络请求处理的并行度，Redis6/7 就是采用的这种方法。&lt;/p&gt;
&lt;h4 id=&#34;主线程和io线程是怎么协作完成请求处理的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主线程和io线程是怎么协作完成请求处理的&#34;&gt;#&lt;/a&gt; 主线程和 IO 线程是怎么协作完成请求处理的？&lt;/h4&gt;
&lt;p&gt;I/O 的读和写本身是堵塞的，比如当 socket 中有数据时，Redis 会通过调用先将数据从内核态空间拷贝到用户态空间，再交给 Redis 调用，而这个拷贝的过程就是阻塞的，当数据量越大时拷贝所需要的时间就越多，而这些操作都是基于单线程完成的。&lt;/p&gt;
&lt;div align=center&gt;&lt;img data-src=&#34;https://img1.imgtp.com/2023/08/29/kuJvq97N.png&#34;&gt;&lt;/div&gt;
&lt;p&gt;从 Redis6 开始，就新增了多线程的功能来提高 I/O 的读写性能，他的主要实现思路是将主线程的 IO 读写任务拆分给一组独立的线程去执行，这样就可以使多个 socket 的读写可以并行化了，采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络 IO 的时间消耗），将最耗时的 Socket 的读取、请求解析、写入单独外包出去，剩下的命令执行仍然由主线程串行执行并和内存的数据交互。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img1.imgtp.com/2023/08/29/Bky7gENR.png&#34; alt=&#34;Redis6/7之前&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;多线程模式是否是默认开启的呢&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多线程模式是否是默认开启的呢&#34;&gt;#&lt;/a&gt; 多线程模式是否是默认开启的呢？&lt;/h4&gt;
&lt;p&gt;Redis6/7 并不默认开启多线程模式，需要手动开启。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img1.imgtp.com/2023/08/29/UFnehp5j.png&#34; alt=&#34;配置文件截图&#34;&gt;&lt;/p&gt;
&lt;p&gt;Redis 自身出道就是优秀，基于内存操作、数据结构简单、多路复用和非阻塞 I/O、避免了不必要的线程上下文切换等特性，在单线程的环境下依然很快；&lt;/p&gt;
&lt;p&gt;但对于大数据的 key 删除还是卡顿厉害，因此在 Redis 4.0 引入了多线程 unlink key/flushall async 等命令，主要用于 Redis 数据的异步删除；&lt;/p&gt;
&lt;p&gt;无论它如何变化，命令的执行依旧是由主线程串行执行的，因此，即使在多线程下操作 Redis 也不会出现线程安全问题。&lt;/p&gt;
</content>
        <category term="redis" />
        <updated>2023-09-01T08:12:51.000Z</updated>
    </entry>
</feed>
